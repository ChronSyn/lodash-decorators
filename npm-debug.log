0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish', 'stage' ]
2 info using npm@2.7.4
3 info using node@v0.12.2
4 verbose publish [ 'stage' ]
5 silly cache add args [ 'stage', null ]
6 verbose cache add spec stage
7 silly cache add parsed spec { raw: 'stage',
7 silly cache add   scope: null,
7 silly cache add   name: 'stage',
7 silly cache add   rawSpec: '',
7 silly cache add   spec: '*',
7 silly cache add   type: 'range' }
8 verbose addNamed stage@*
9 silly addNamed semver.valid null
10 silly addNamed semver.validRange *
11 silly addNameRange { name: 'stage', range: '*', hasData: false }
12 silly mapToRegistry name stage
13 silly mapToRegistry using default registry
14 silly mapToRegistry registry https://registry.npmjs.org/
15 silly mapToRegistry uri https://registry.npmjs.org/stage
16 verbose addNameRange registry:https://registry.npmjs.org/stage not in flight; fetching
17 verbose request uri https://registry.npmjs.org/stage
18 verbose request no auth needed
19 info attempt registry request try #1 at 4:16:34 PM
20 verbose request using bearer token for auth
21 verbose request id 914df206ba26b408
22 http request GET https://registry.npmjs.org/stage
23 http 200 https://registry.npmjs.org/stage
24 silly get cb [ 200,
24 silly get   { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
24 silly get     etag: '"1HSX83KAN2XRPLP2EF7VQKZAI"',
24 silly get     'content-type': 'application/json',
24 silly get     'cache-control': 'max-age=60',
24 silly get     'content-length': '20393',
24 silly get     'accept-ranges': 'bytes',
24 silly get     date: 'Mon, 29 Jun 2015 21:16:20 GMT',
24 silly get     via: '1.1 varnish',
24 silly get     connection: 'keep-alive',
24 silly get     'x-served-by': 'cache-dfw1832-DFW',
24 silly get     'x-cache': 'MISS',
24 silly get     'x-cache-hits': '0',
24 silly get     'x-timer': 'S1435612579.981378,VS0,VE83',
24 silly get     vary: 'Accept' } ]
25 verbose get saving stage to /Users/soj214/.npm/registry.npmjs.org/stage/.cache.json
26 silly addNameRange number 2 { name: 'stage', range: '*', hasData: true }
27 silly addNameRange versions [ 'stage',
27 silly addNameRange   [ '0.7.1', '0.7.2', '0.7.0', '0.8.0', '0.8.1', '0.8.2', '0.9.0' ] ]
28 verbose addNamed stage@0.9.0
29 silly addNamed semver.valid 0.9.0
30 silly addNamed semver.validRange 0.9.0
31 silly mapToRegistry name stage
32 silly mapToRegistry using default registry
33 silly mapToRegistry registry https://registry.npmjs.org/
34 silly mapToRegistry uri https://registry.npmjs.org/stage
35 verbose addRemoteTarball https://registry.npmjs.org/stage/-/stage-0.9.0.tgz not in flight; adding
36 verbose addRemoteTarball [ 'https://registry.npmjs.org/stage/-/stage-0.9.0.tgz',
36 verbose addRemoteTarball   'd1e93158fc8c1ad5cfc3fde3cbaa90c97763eace' ]
37 info retry fetch attempt 1 at 4:16:34 PM
38 info attempt registry request try #1 at 4:16:34 PM
39 http fetch GET https://registry.npmjs.org/stage/-/stage-0.9.0.tgz
40 verbose request using bearer token for auth
41 http fetch 200 https://registry.npmjs.org/stage/-/stage-0.9.0.tgz
42 silly fetchAndShaCheck shasum d1e93158fc8c1ad5cfc3fde3cbaa90c97763eace
43 verbose addTmpTarball /var/folders/r5/tbk_3y0n3lj2053fl0tpb8v10q9f98/T/npm-70713-0c1277e8/registry.npmjs.org/stage/-/stage-0.9.0.tgz not in flight; adding
44 verbose addTmpTarball already have metadata; skipping unpack for stage@0.9.0
45 silly cache afterAdd stage@0.9.0
46 verbose afterAdd /Users/soj214/.npm/stage/0.9.0/package/package.json not in flight; writing
47 verbose afterAdd /Users/soj214/.npm/stage/0.9.0/package/package.json written
48 silly publish { author:
48 silly publish    { name: 'Johan Dahlberg',
48 silly publish      email: 'dahlberg.johan@gmail.com',
48 silly publish      url: 'jfd.github.com' },
48 silly publish   name: 'stage',
48 silly publish   description: 'Distributed testing for Node.js',
48 silly publish   version: '0.9.0',
48 silly publish   bin: { stage: './bin/stage' },
48 silly publish   keywords: [ 'test', 'testing', 'stage', 'distributed' ],
48 silly publish   man:
48 silly publish    [ 'man/abort.1',
48 silly publish      'man/clients.1',
48 silly publish      'man/collect.1',
48 silly publish      'man/install.1',
48 silly publish      'man/jobs.1',
48 silly publish      'man/localenv.1',
48 silly publish      'man/master.1',
48 silly publish      'man/run.1',
48 silly publish      'man/slave.1',
48 silly publish      'man/stage.1',
48 silly publish      'man/tests.1',
48 silly publish      'man/uninstall.1',
48 silly publish      'man/setup-machine.1',
48 silly publish      'man/setup-smartdc.1',
48 silly publish      'man/clean-smartdc.1' ],
48 silly publish   dependencies:
48 silly publish    { ws: '~0.4.22',
48 silly publish      temporary: '~0.0.5',
48 silly publish      forever: '~0.10.0',
48 silly publish      ssh2: '0.2.14',
48 silly publish      smartdc: '7.1.1' },
48 silly publish   repository: { type: 'git', url: 'git://github.com/jfd/stage.git' },
48 silly publish   engines: { node: '>=0.7.7' },
48 silly publish   readme: 'Stage - Distributed Testing Suite\n=================================\n\nStage is a distributed testing suite for Node.js. The main goal is to provide a test suite that can help with network related test cases such as load balancing and performance testing.\n\nStage includes tools for setting up test networks (via SSH or Joyent SmartDC), distribute and running test and collecting results.\n\n\n## Installation\n\nStage installs via NPM. Run the following command in your terminal:\n\n    $  npm install stage -g\n\n\n## Example\n\nThis example is creating a testing enviroment using your current Joyent Smartdc settings (expects that SDC is currently installed and configured with environmental variables). \n\nFirst of, we need to setup a Stage Master server:\n\n    $  stage setup-smartdc master\n\nThe Master Server it self cannot run tests. This is done by slave servers. We can simply setup a Stage Slave server with the `setup-smartdc` command as well:\n\n    $  stage setup-smartdc slave --remote-url ws://<ip-and-port-to-master-server>\n\nWe are now ready to create our first test. Stage comes with a tool that initialize a basic test for you:\n\n    $  stage init-test mytest\n\nOur test is now created in the folder \'mytest\'. The test can be run out-of-the-box but will not do much. In order for it do to something, you can edit the \'test.js\' file.\n\nAll commands from this point is need to now the address to the master server. There is two ways of telling the command who to talk to. Via the comamnd line or via an environmental variable. We will go with the environmental variable in this case.\n\n    $   export STAGE_URL=http://<ip-and-port-to-master-server>\n\nYou could pass the argument `--url http://<ip-and-port-to-master-server>` if you prefer to leave the environment untouched.\n\nIt is now time to install the test on the Master Server:\n\n    $  stage install mytest\n\nThe test is now installed. Next step is to tell the master to run the test on the connected Slave. Note that this phase is async, the command will exit immidently.\n\n    $  stage run mytest@1.0.0\n\nYou can monitor the test via the `stage list` command. Once it is ready, you can collect the test results. This is done with the `stage collect` command:\n\n    $  stage collect 1\n\nThis is just a basic example in how to use Stage. See manpages for more information:\n\n    $  stage help\n\n\n## Issues\n\nPlease report any issue on github: https://github.com/jfd/stage/issues\n\n## License\n\nStage is licensed under the MIT license. See LICENSE in this repo for more information.\n\n\n## Copyright\n\nCopyright (c) 2013 Johan Dahlberg <http://jfd.github.com>',
48 silly publish   readmeFilename: 'README.md',
48 silly publish   bugs: { url: 'https://github.com/jfd/stage/issues' },
48 silly publish   _id: 'stage@0.9.0',
48 silly publish   dist:
48 silly publish    { shasum: 'd1e93158fc8c1ad5cfc3fde3cbaa90c97763eace',
48 silly publish      tarball: 'http://registry.npmjs.org/stage/-/stage-0.9.0.tgz' },
48 silly publish   _from: 'stage@*',
48 silly publish   _npmVersion: '1.3.8',
48 silly publish   _npmUser: { name: 'jfd', email: 'dahlberg.johan@gmail.com' },
48 silly publish   maintainers: [ { name: 'jfd', email: 'dahlberg.johan@gmail.com' } ],
48 silly publish   directories: {},
48 silly publish   _shasum: 'd1e93158fc8c1ad5cfc3fde3cbaa90c97763eace',
48 silly publish   _resolved: 'https://registry.npmjs.org/stage/-/stage-0.9.0.tgz' }
49 info prepublish stage@0.9.0
50 silly mapToRegistry name stage
51 silly mapToRegistry using default registry
52 silly mapToRegistry registry https://registry.npmjs.org/
53 silly mapToRegistry uri https://registry.npmjs.org/stage
54 verbose publish registryBase https://registry.npmjs.org/
55 silly publish uploading /Users/soj214/.npm/stage/0.9.0/package.tgz
56 verbose request uri https://registry.npmjs.org/stage
57 verbose request sending authorization for write operation
58 info attempt registry request try #1 at 4:16:35 PM
59 verbose request using bearer token for auth
60 http request PUT https://registry.npmjs.org/stage
61 http 403 https://registry.npmjs.org/stage
62 verbose headers { 'content-type': 'application/json',
62 verbose headers   'cache-control': 'max-age=60',
62 verbose headers   'content-length': '97',
62 verbose headers   'accept-ranges': 'bytes',
62 verbose headers   date: 'Mon, 29 Jun 2015 21:16:20 GMT',
62 verbose headers   via: '1.1 varnish',
62 verbose headers   connection: 'keep-alive',
62 verbose headers   'x-served-by': 'cache-dfw1832-DFW',
62 verbose headers   'x-cache': 'MISS',
62 verbose headers   'x-cache-hits': '0',
62 verbose headers   'x-timer': 'S1435612580.588918,VS0,VE311' }
63 verbose request invalidating /Users/soj214/.npm/registry.npmjs.org/stage on PUT
64 error publish Failed PUT 403
65 verbose stack Error: You do not have permission to publish 'stage'. Are you logged in as the correct user? : stage
65 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
65 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
65 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
65 verbose stack     at Request.emit (events.js:110:17)
65 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1239:14)
65 verbose stack     at Request.emit (events.js:129:20)
65 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1187:12)
65 verbose stack     at IncomingMessage.emit (events.js:129:20)
65 verbose stack     at _stream_readable.js:908:16
65 verbose stack     at process._tickCallback (node.js:355:11)
66 verbose statusCode 403
67 verbose pkgid stage
68 verbose cwd /users/soj214/Projects/lodash-decorators
69 error Darwin 13.4.0
70 error argv "node" "/usr/local/bin/npm" "publish" "stage"
71 error node v0.12.2
72 error npm  v2.7.4
73 error code E403
74 error You do not have permission to publish 'stage'. Are you logged in as the correct user? : stage
75 error If you need help, you may report this error at:
75 error     <https://github.com/npm/npm/issues>
76 verbose exit [ 1, true ]
